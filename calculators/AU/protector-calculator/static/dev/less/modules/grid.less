// Grids
//
// Grids are based on the <a href="http://getbootstrap.com/css/#grid">Twitter Bootstrap</a> grid system.
//
// You can define the number of columns, gutter width and responsive breakpoints in the variables.less file.
//
// Styleguide 5.


// Usage
//
// Markup:
// <div class="row">
//     <div class="col-xs-6">6 columns</div>
//     <div class="col-xs-6">6 columns</div>
// </div>
//
// Styleguide 5.1.1.


// Grid offsets
//
// Offsets allow you to add space beside your column
//
// Markup:
// <div class="row">
//     <div class="col-xs-6 col-xs-offset-3">6 columns, 3 column offset</div>
// </div>
//
// Styleguide 5.1.2.


// Grid push & pull
//
// Pushing and pulling of grids allows you to change the order of your columns
//
// Markup:
// <div class="row">
//     <div class="col-xs-6 col-xs-push-6">6 columns, push 6 columns</div>
//     <div class="col-xs-6 col-xs-pull-6">6 columns, pull 6 columns</div>
// </div>
//
// Styleguide 5.1.3.


// Responsive
//
// There are classes which can be used to create your grid or you may prefer to use mixins:
//
// .make-xs-column(@numColumns);<br />
// .make-xs-column-offset(@numColumns);<br />
// .make-xs-column-push(@numColumns);<br />
// .make-xs-column-pull(@numColumns);<br />
//
// By default there are 4 responsive states (xs, md, lg, xl)
//
// Markup:
// <div class="row">
//     <div class="col-xs-6 col-md-6 col-lg-6 col-xl-6">6 columns, push 6 columns</div>
//     <div class="col-xs-6 col-md-6 col-lg-6 col-xl-6">6 columns, pull 6 columns</div>
// </div>
//
// Styleguide 5.1.3.


// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
    @media (max-width: @screen-xs-max) {
        padding-left: @mobile-padding-container;
        padding-right: @mobile-padding-container;
    }
    @media (min-width: @screen-sm-min) {
        .container-fixed();
        width: @container-sm;
    }
    @media (min-width: @screen-md-min) {
        width: @container-md;
    }
    @media (min-width: @screen-lg-min) {
        width: @container-lg;
    }
}


// // Fluid container
// //
// // Utilizes the mixin meant for fixed width containers, but without any defined
// // width for fluid, full width layouts.

// .container-fluid {
//     .container-fixed();
// }


// // Row
// //
// // Rows contain and clear the floats of your columns.

.row {
    .make-row();
    .Clearfix;
}


// // Columns
// //
// // Common styles for small and large grid columns

// .make-grid-columns();


// // Extra small grid
// //
// // Columns, offsets, pushes, and pulls for extra small devices like
// // smartphones.

// .make-grid(xs);


// // Small grid
// //
// // Columns, offsets, pushes, and pulls for the small device range, from phones
// // to tablets.

// @media (min-width: @screen-sm-min) {
//     .make-grid(sm);
// }


// // Medium grid
// //
// // Columns, offsets, pushes, and pulls for the desktop device range.

// @media (min-width: @screen-md-min) {
//     .make-grid(md);
// }


// // Large grid
// //
// // Columns, offsets, pushes, and pulls for the large desktop device range.

// @media (min-width: @screen-lg-min) {
//     .make-grid(lg);
// }